# AWS Node Template for Karpenter
# This defines the AWS-specific configuration for nodes
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: default
spec:
  # Subnet selection - use private subnets
  subnetSelector:
    karpenter.sh/discovery: "prod"  # Should match your cluster name
    # Or use explicit subnet IDs
    # aws-ids: "subnet-079d058e0a15c1637,subnet-01a954c7b171cc1bd"
  
  # Security group selection
  securityGroupSelector:
    karpenter.sh/discovery: "prod"  # Should match your cluster name
    # Or use explicit security group IDs
    # aws-ids: "sg-xxxxxxxx"
  
  # Instance profile for nodes
  instanceProfile: KarpenterNodeInstanceProfile
  
  # AMI Family
  amiFamily: AL2023  # Amazon Linux 2023
  # Options: AL2023, AL2, Bottlerocket, Ubuntu, Windows2019, Windows2022, Custom
  
  # User data for node initialization
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh prod
    echo "net.ipv4.ip_forward = 1" | sudo tee -a /etc/sysctl.conf
    sudo sysctl -p /etc/sysctl.conf
  
  # Instance metadata options
  instanceMetadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required  # IMDSv2
  
  # Instance store (if applicable)
  instanceStorePolicy: RAID0
  
  # Block device mappings
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        iops: 3000
        throughput: 125
        deleteOnTermination: true
        encrypted: true
        # kmsKeyID: "arn:aws:kms:ap-northeast-2:928475935003:key/xxxxx"
  
  # Tags for instances
  tags:
    Environment: production
    ManagedBy: Karpenter
    Cluster: prod
    Team: platform
    CostCenter: engineering
  
  # Detailed monitoring
  detailedMonitoring: true

---
# Alternative Node Template for Bottlerocket OS
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: bottlerocket
spec:
  subnetSelector:
    karpenter.sh/discovery: "prod"
  
  securityGroupSelector:
    karpenter.sh/discovery: "prod"
  
  instanceProfile: KarpenterNodeInstanceProfile
  
  # Bottlerocket specific
  amiFamily: Bottlerocket
  
  userData: |
    [settings.kubernetes]
    cluster-name = "prod"
    api-server = "https://A361248A49694E825C8DDD0018E37CD5.yl4.ap-northeast-2.eks.amazonaws.com"
    cluster-certificate = "LS0tLS..."
    cluster-dns-ip = "172.20.0.10"
    
    [settings.kubernetes.node-labels]
    "karpenter.sh/node" = "true"
    
    [settings.kubernetes.node-taints]
    "karpenter.sh/node" = "true:NoSchedule"
  
  instanceMetadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 50Gi
        volumeType: gp3
        deleteOnTermination: true
        encrypted: true
    - deviceName: /dev/xvdb
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        deleteOnTermination: true
        encrypted: true
  
  tags:
    Environment: production
    ManagedBy: Karpenter
    OS: Bottlerocket
    Cluster: prod

---
# Node Template for GPU Instances (if needed)
apiVersion: karpenter.k8s.aws/v1alpha1
kind: AWSNodeTemplate
metadata:
  name: gpu
spec:
  subnetSelector:
    karpenter.sh/discovery: "prod"
  
  securityGroupSelector:
    karpenter.sh/discovery: "prod"
  
  instanceProfile: KarpenterNodeInstanceProfile
  
  amiFamily: AL2023
  
  # GPU specific user data
  userData: |
    #!/bin/bash
    /etc/eks/bootstrap.sh prod
    
    # Install NVIDIA drivers
    sudo yum install -y gcc kernel-devel-$(uname -r)
    distribution=$(. /etc/os-release;echo $ID$VERSION_ID | sed 's/\.//g')
    wget https://developer.download.nvidia.com/compute/cuda/repos/$distribution/x86_64/cuda-$distribution.repo
    sudo mv cuda-$distribution.repo /etc/yum.repos.d/
    sudo yum clean expire-cache
    sudo yum install -y nvidia-driver-latest-dkms
    sudo yum install -y cuda-drivers
    
    # Install nvidia-container-toolkit
    distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
    curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.repo | sudo tee /etc/yum.repos.d/nvidia-docker.repo
    sudo yum install -y nvidia-container-toolkit
    sudo systemctl restart docker
  
  instanceMetadataOptions:
    httpEndpoint: enabled
    httpProtocolIPv6: disabled
    httpPutResponseHopLimit: 2
    httpTokens: required
  
  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 200Gi
        volumeType: gp3
        deleteOnTermination: true
        encrypted: true
  
  tags:
    Environment: production
    ManagedBy: Karpenter
    NodeType: GPU
    Cluster: prod