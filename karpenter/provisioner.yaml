# Karpenter Provisioner Configuration
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: default
  annotations:
    karpenter.sh/provisioner-hash: "1599235016353422174"
spec:
  # Resource limits for this provisioner
  limits:
    resources:
      cpu: "1000"        # Maximum 1000 vCPUs
      memory: "1000Gi"   # Maximum 1000Gi memory
  
  # Node requirements
  requirements:
    # Capacity type - both Spot and On-Demand
    - key: karpenter.sh/capacity-type
      operator: In
      values:
        - spot
        - on-demand
    
    # Architecture - both ARM64 and AMD64
    - key: kubernetes.io/arch
      operator: In
      values:
        - arm64
        - amd64
    
    # Instance types
    - key: node.kubernetes.io/instance-type
      operator: In
      values:
        - t4g.medium    # 2 vCPU, 4 GiB
        - t4g.large     # 2 vCPU, 8 GiB
        - c6g.large     # 2 vCPU, 4 GiB
        - c6g.xlarge    # 4 vCPU, 8 GiB
        # AMD64 instances
        - t3.medium     # 2 vCPU, 4 GiB
        - t3.large      # 2 vCPU, 8 GiB
        - c5.large      # 2 vCPU, 4 GiB
        - c5.xlarge     # 4 vCPU, 8 GiB
    
    # Operating System
    - key: kubernetes.io/os
      operator: In
      values:
        - linux
  
  # Provider reference
  providerRef:
    name: default
  
  # Node expiration - 30 days
  ttlSecondsUntilExpired: 2592000  # 30 days
  
  # Taints for spot instances (optional)
  # taints:
  #   - key: spot
  #     value: "true"
  #     effect: NoSchedule
  
  # Startup taints (optional)
  # startupTaints:
  #   - key: node.karpenter.sh/initializing
  #     value: "true"
  #     effect: NoSchedule

---
# Alternative Provisioner for Spot-only workloads
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: spot-only
spec:
  limits:
    resources:
      cpu: "500"
      memory: "500Gi"
  
  requirements:
    - key: karpenter.sh/capacity-type
      operator: In
      values:
        - spot  # Only spot instances
    
    - key: kubernetes.io/arch
      operator: In
      values:
        - arm64  # Prefer ARM64 for cost optimization
    
    - key: node.kubernetes.io/instance-type
      operator: In
      values:
        - t4g.small
        - t4g.medium
        - t4g.large
        - t4g.xlarge
    
    - key: kubernetes.io/os
      operator: In
      values:
        - linux
  
  providerRef:
    name: default
  
  # Shorter TTL for spot instances
  ttlSecondsUntilExpired: 86400  # 1 day
  
  # Empty nodes are deprovisioned after 30 seconds
  ttlSecondsAfterEmpty: 30
  
  # Taints for spot instances
  taints:
    - key: spot
      value: "true"
      effect: NoSchedule

---
# Provisioner for Critical Workloads (On-Demand only)
apiVersion: karpenter.sh/v1alpha5
kind: Provisioner
metadata:
  name: on-demand
spec:
  limits:
    resources:
      cpu: "200"
      memory: "200Gi"
  
  requirements:
    - key: karpenter.sh/capacity-type
      operator: In
      values:
        - on-demand  # Only on-demand instances
    
    - key: kubernetes.io/arch
      operator: In
      values:
        - arm64
        - amd64
    
    - key: node.kubernetes.io/instance-type
      operator: In
      values:
        - t3.medium
        - t3.large
        - c5.large
        - c5.xlarge
    
    - key: kubernetes.io/os
      operator: In
      values:
        - linux
  
  providerRef:
    name: default
  
  # Longer TTL for on-demand instances
  ttlSecondsUntilExpired: 604800  # 7 days
  
  # Keep nodes for 5 minutes after empty
  ttlSecondsAfterEmpty: 300
  
  # Labels for on-demand nodes
  labels:
    karpenter.sh/node-type: "on-demand"
    environment: "production"