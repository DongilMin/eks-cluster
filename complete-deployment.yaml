# Namespace
---
apiVersion: v1
kind: Namespace
metadata:
  name: production

# ConfigMap
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
data:
  AWS_REGION: ap-northeast-2
  DYNAMODB_ORDERS_TABLE: orders
  DYNAMODB_PRODUCTS_TABLE: products-table
  KAFKA_BROKERS: kafka-service.production.svc.cluster.local:9092
  KAFKA_ENABLED: "false"

# ServiceAccounts
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: product-service-sa
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/EKSProductServiceRole

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: order-service-sa
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/EKSOrderServiceRole

# Kafka StatefulSet
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: production
spec:
  serviceName: kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.4.0
        ports:
        - containerPort: 9092
          name: plaintext
        - containerPort: 9093
          name: controller
        env:
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service.production.svc.cluster.local:9092,PLAINTEXT_HOST://localhost:29092"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@kafka-0.kafka-service.production.svc.cluster.local:9093"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092"
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: "PLAINTEXT"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: CLUSTER_ID
          value: "MkU3OEVBNTcwNTJENDM2Qk"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS
          value: "0"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data"
        volumeMounts:
        - name: kafka-storage
          mountPath: /var/lib/kafka/data
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      nodeSelector:
        kubernetes.io/arch: arm64
  volumeClaimTemplates:
  - metadata:
      name: kafka-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp2
      resources:
        requests:
          storage: 10Gi

# Kafka Service
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: production
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092
    protocol: TCP
    name: plaintext

# Product Service Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: production
  labels:
    app: product-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      serviceAccountName: product-service-sa
      containers:
      - name: product-service
        image: 928475935003.dkr.ecr.ap-northeast-2.amazonaws.com/product-service:v5
        ports:
        - containerPort: 8081
          protocol: TCP
        env:
        - name: PORT
          value: "8081"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: AWS_REGION
        - name: DYNAMODB_TABLE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DYNAMODB_PRODUCTS_TABLE
        - name: KAFKA_BROKERS
          value: kafka-service.production.svc.cluster.local:9092
        - name: KAFKA_ENABLED
          value: "true"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 5
      nodeSelector:
        kubernetes.io/arch: arm64
      tolerations:
      - key: node-role
        operator: Equal
        value: app
        effect: NoSchedule

# Product Service
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: production
spec:
  type: NodePort
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP
    nodePort: 30364

# Order Service Deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: production
  labels:
    app: order-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      serviceAccountName: order-service-sa
      containers:
      - name: order-service
        image: 928475935003.dkr.ecr.ap-northeast-2.amazonaws.com/order-service:v2
        ports:
        - containerPort: 8080
          protocol: TCP
        env:
        - name: PORT
          value: "8080"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: AWS_REGION
        - name: DYNAMODB_TABLE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DYNAMODB_ORDERS_TABLE
        - name: KAFKA_BROKERS
          value: kafka-service.production.svc.cluster.local:9092
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
      nodeSelector:
        kubernetes.io/arch: arm64
      tolerations:
      - key: node-role
        operator: Equal
        value: app
        effect: NoSchedule

# Order Service
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: production
spec:
  type: NodePort
  selector:
    app: order-service
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    nodePort: 30612

# Ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: msa-ingress
  namespace: production
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    kubernetes.io/ingress.class: nginx
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      - path: /products/(.*)
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 80
      - path: /orders/(.*)
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 80
