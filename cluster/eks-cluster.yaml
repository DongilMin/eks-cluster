# EKS Cluster Complete Configuration
# Cluster: prod
# Region: ap-northeast-2
# Generated: 2025-08-19

---
# ============================================
# AWS Infrastructure
# ============================================

# VPC Configuration
vpc:
  id: vpc-0b2e9abf762494044
  name: oliveyoung-prod
  cidr: 10.1.0.0/16
  region: ap-northeast-2
  
  # Public Subnets (Internet-facing)
  public_subnets:
    - id: subnet-00a1df66e269743b3
      name: oliveyoung-prod-pub-a
      cidr: 10.1.1.0/24
      availability_zone: ap-northeast-2a
      nat_gateway: nat-01bd5bbff1d68472f  # Assumed from diagram
    - id: subnet-057b1399a4c256f74
      name: oliveyoung-prod-pub-c
      cidr: 10.1.2.0/24
      availability_zone: ap-northeast-2c
  
  # Private Subnets (EKS Worker Nodes)
  private_subnets:
    - id: subnet-079d058e0a15c1637
      name: oliveyoung-prod-pri-a
      cidr: 10.1.11.0/24
      availability_zone: ap-northeast-2a
    - id: subnet-01a954c7b171cc1bd
      name: oliveyoung-prod-pri-c
      cidr: 10.1.12.0/24
      availability_zone: ap-northeast-2c

# Load Balancers
load_balancers:
  # Application Load Balancer for MSA
  - type: application
    name: k8s-producti-msaingre-a832bcc2c1
    dns: k8s-producti-msaingre-a832bcc2c1-1931180001.ap-northeast-2.elb.amazonaws.com
    scheme: internet-facing
    security_groups:
      - sg-04910c18bd8f8500a
      - sg-0d6f1037ede9e7a25
    target_groups:
      - name: k8s-producti-products-629881bb11
        port: 8081
        health_check: /api/v1/health
      - name: k8s-producti-orderser-0760fd501e

  # Network Load Balancers
  - type: network
    name: ad610fdaa91464022ae22e719a53a468
    dns: ad610fdaa91464022ae22e719a53a468-0ff550a48fbe1c01.elb.ap-northeast-2.amazonaws.com
    service: headlamp
  
  - type: network
    name: aa0f272db301b40e19218d5f38ace125
    dns: aa0f272db301b40e19218d5f38ace125-16d29c4eba987a3e.elb.ap-northeast-2.amazonaws.com
    service: grafana

---
# ============================================
# EKS Cluster Configuration
# ============================================

eks_cluster:
  name: prod
  endpoint: https://A361248A49694E825C8DDD0018E37CD5.yl4.ap-northeast-2.eks.amazonaws.com
  version: "1.33"
  
  # Node Groups
  nodes:
    - name: ip-10-1-11-154.ap-northeast-2.compute.internal
      instance_type: arm64
      subnet: subnet-079d058e0a15c1637
      internal_ip: 10.1.11.154
      os: Amazon Linux 2023.8.20250808
      kubernetes_version: v1.33.3-eks-3abbec1
    - name: ip-10-1-11-184.ap-northeast-2.compute.internal
      instance_type: arm64
      subnet: subnet-079d058e0a15c1637
      internal_ip: 10.1.11.184
      os: Amazon Linux 2023.8.20250808
      kubernetes_version: v1.33.3-eks-3abbec1
    - name: ip-10-1-12-169.ap-northeast-2.compute.internal
      instance_type: arm64
      subnet: subnet-01a954c7b171cc1bd
      internal_ip: 10.1.12.169
      os: Amazon Linux 2023.8.20250808
      kubernetes_version: v1.33.3-eks-3abbec1
    - name: ip-10-1-12-64.ap-northeast-2.compute.internal
      instance_type: arm64
      subnet: subnet-01a954c7b171cc1bd
      internal_ip: 10.1.12.64
      os: Amazon Linux 2023.8.20250808
      kubernetes_version: v1.33.3-eks-3abbec1
    # Karpenter managed nodes
    - name: i-0ca8f63396c2f5a20
      internal_ip: 10.1.12.67
      os: Bottlerocket (EKS Auto)
      kubernetes_version: v1.33.1-eks-b9364f6
    - name: i-0e8fcb63c2579bbad
      internal_ip: 10.1.12.192
      os: Bottlerocket (EKS Auto)
      kubernetes_version: v1.33.1-eks-b9364f6

---
# ============================================
# Kubernetes Namespaces
# ============================================

apiVersion: v1
kind: Namespace
metadata:
  name: production
---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
apiVersion: v1
kind: Namespace
metadata:
  name: argocd
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
---
apiVersion: v1
kind: Namespace
metadata:
  name: karpenter

---
# ============================================
# Production Services
# ============================================

# ConfigMap for Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: production
data:
  AWS_REGION: ap-northeast-2
  DYNAMODB_PRODUCTS_TABLE: products
  DYNAMODB_ORDERS_TABLE: orders
  KAFKA_ENABLED: "true"
  KAFKA_BROKERS: kafka-service.production.svc.cluster.local:9092

---
# Product Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      serviceAccountName: product-service-sa
      nodeSelector:
        kubernetes.io/arch: arm64
      tolerations:
        - key: node-role
          operator: Equal
          value: app
          effect: NoSchedule
      containers:
      - name: product-service
        image: 928475935003.dkr.ecr.ap-northeast-2.amazonaws.com/product-service:v5
        ports:
        - containerPort: 8081
          name: http
        - containerPort: 8080
          name: metrics
        env:
        - name: PORT
          value: "8081"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: AWS_REGION
        - name: DYNAMODB_TABLE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DYNAMODB_PRODUCTS_TABLE
        - name: KAFKA_BROKERS
          value: kafka-service.production.svc.cluster.local:9092
        - name: KAFKA_ENABLED
          value: "true"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi

---
# Product Service
apiVersion: v1
kind: Service
metadata:
  name: product-service
  namespace: production
spec:
  type: ClusterIP
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 8081
    protocol: TCP

---
# Order Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      serviceAccountName: order-service-sa
      nodeSelector:
        kubernetes.io/arch: arm64
      tolerations:
        - key: node-role
          operator: Equal
          value: app
          effect: NoSchedule
      containers:
      - name: order-service
        image: 928475935003.dkr.ecr.ap-northeast-2.amazonaws.com/order-service:latest
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: PORT
          value: "8080"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: AWS_REGION
        - name: DYNAMODB_TABLE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DYNAMODB_ORDERS_TABLE
        - name: KAFKA_BROKERS
          value: kafka-service.production.svc.cluster.local:9092
        - name: KAFKA_ENABLED
          value: "true"
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi

---
# Order Service
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: production
spec:
  type: ClusterIP
  selector:
    app: order-service
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP

---
# Kafka StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: production
spec:
  serviceName: kafka-service
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:latest
        ports:
        - containerPort: 9092
          name: kafka

---
# Kafka Service
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: production
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: kafka
  ports:
  - port: 9092
    targetPort: 9092

---
# ============================================
# Ingress Configuration
# ============================================

# MSA Ingress (AWS ALB)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: msa-ingress
  namespace: production
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /api/v1/health
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/success-codes: "200"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /api/v1/products
        pathType: Prefix
        backend:
          service:
            name: product-service
            port:
              number: 80
      - path: /api/v1/orders
        pathType: Prefix
        backend:
          service:
            name: order-service
            port:
              number: 80

---
# ArgoCD Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: argocd-ingress
  namespace: argocd
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  ingressClassName: alb
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: argocd-server
            port:
              number: 80

---
# ============================================
# Service Accounts & RBAC
# ============================================

# Product Service ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: product-service-sa
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/product-service-role

---
# Order Service ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: order-service-sa
  namespace: production
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/order-service-role

---
# ============================================
# System Components
# ============================================

# AWS Load Balancer Controller
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aws-load-balancer-controller
  namespace: kube-system
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/AmazonEKSLoadBalancerControllerRole

---
# Karpenter
apiVersion: v1
kind: ServiceAccount
metadata:
  name: karpenter
  namespace: karpenter
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::928475935003:role/KarpenterNodeInstanceProfile

---
# ============================================
# Monitoring Stack
# ============================================

# Prometheus
apiVersion: v1
kind: Service
metadata:
  name: kube-prometheus-kube-prome-prometheus
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    name: http
  selector:
    app.kubernetes.io/name: prometheus

---
# Grafana
apiVersion: v1
kind: Service
metadata:
  name: kube-prometheus-grafana
  namespace: default
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana

---
# Loki
apiVersion: v1
kind: Service
metadata:
  name: loki-gateway
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 3100
  selector:
    app.kubernetes.io/name: loki

---
# Tempo
apiVersion: v1
kind: Service
metadata:
  name: tempo-query-frontend
  namespace: default
spec:
  type: ClusterIP
  ports:
  - port: 3200
    targetPort: 3200
  selector:
    app.kubernetes.io/name: tempo

---
# ============================================
# Storage Configuration
# ============================================

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp2
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp2
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer

---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gp3
provisioner: ebs.csi.aws.com
parameters:
  type: gp3
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer